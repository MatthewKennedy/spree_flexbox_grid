
/*============================================================================
  Grid Breakpoints and Class Names
    - Do not change the variable names
==============================================================================*/
/* Set the breakepoint between small and medium size devices (phones and tablets) */
$grid-medium: 750px;

/* Set the breakepoint between medium and large (tablets and desktop) */
$grid-large: 1200px;

/* Set the maximum width of any content contained witin a div with the class 'wrapper' */
$grid-widescreen: 1200px;

/* Set base grid gutter */
$grid-gutter:15px;


/*============================================================================
  Start flexboxgrid
==============================================================================*/
@import 'flex';
// Set the number of columns you want to use on your layout.
$grid-columns: 12 !default;
// Set the gutter between columns.
$flexboxgrid-gutter-width: 1rem !default;
// Set a margin for the container sides.
$flexboxgrid-outer-margin: 2rem !default;
// Create or remove breakpoints for your project
// Syntax:
// name SIZErem,
$breakps:
  md $grid-medium,
  lg $grid-large;

//
// -- Stop editing -- //
//
$gutter-compensation: $flexboxgrid-gutter-width * .5 * -1;
$half-gutter-width: $flexboxgrid-gutter-width * .5;

.wrapper, .container {
  box-sizing: border-box;
  max-width: $grid-widescreen;
  margin: 0 auto;
}

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $flexboxgrid-outer-margin;
  padding-left: $flexboxgrid-outer-margin;
}

.row {
  box-sizing: border-box;
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.row.reverse {
  @include flex-direction(row-reverse);
}

.col.reverse {
  @include flex-direction(column-reverse);
}

@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;
  // split @include flex(0, 0, auto) into individual props
  @include flex-grow(0);
  @include flex-shrink(0);

  // we leave @include flex-basis(auto) out of common because
  // in some spots we need it and some we dont
  // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126
  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}


$name: sm;
.col-#{$name} {
  @include flexboxgrid-sass-col-common;
  @include flex-basis(auto);
}
@for $i from 1 through $grid-columns {
  .col-#{$name}-#{$i} {
    @include flexboxgrid-sass-col-common;
    @include flex-basis(100% / $grid-columns * $i);
    max-width: 100% / $grid-columns * $i;
  }
}
@for $i from 1 through $grid-columns {
  .col-#{$name}-offset-#{$i} {
    @include flexboxgrid-sass-col-common;
    margin-left: 100% / $grid-columns * $i;
  }
}
.col-#{$name} {
  @include flex-grow(1);
  @include flex-basis(0);
  max-width: 100%;
}
.start-#{$name} {
  @include justify-content(flex-start);
  text-align: start;
}

.center-#{$name} {
  @include justify-content(center);
  text-align: center;
}

.end-#{$name} {
  @include justify-content(flex-end);
  text-align: end;
}

.top-#{$name} {
  @include align-items(flex-start);
}

.middle-#{$name} {
  @include align-items(center);
}

.bottom-#{$name} {
  @include align-items(flex-end);
}

.around-#{$name} {
  @include justify-content(space-around);
}

.between-#{$name} {
  @include justify-content(space-between);
}

.first-#{$name} {
  order: -1;
}

.last-#{$name} {
  order: 1;
}

.show-#{$name} {
  display: block !important;
}

.hide-#{$name} {
  display: none !important;
}

.text-left-#{$name}{
  text-align: left !important;
}

.text-right-#{$name} {
  text-align: right !important;
}

.text-center-#{$name} {
  text-align: center !important;
}

.pair-gutter-first-#{$name} {
 padding-left: $grid-gutter !important;
 padding-right: $grid-gutter / 2  !important;
}

.pair-gutter-last-#{$name} {
 padding-left:  $grid-gutter / 2  !important;
 padding-right: $grid-gutter !important;
}

.left-gutter-#{$name} {
 padding-left: $grid-gutter !important;
}

.right-gutter-#{$name}{
 padding-right: $grid-gutter !important;
}

.both-gutters-#{$name} {
padding-left: $grid-gutter !important;
padding-right: $grid-gutter !important;
}

@each $breakp in $breakps {
  $name: nth($breakp, 1);
  $size: nth($breakp, 2);

  @media only screen and (min-width: $size) {


    .col-#{$name} {
      @include flexboxgrid-sass-col-common;
      @include flex-basis(auto);
    }
    @for $i from 1 through $grid-columns {
      .col-#{$name}-#{$i} {
        @include flexboxgrid-sass-col-common;
        @include flex-basis(100% / $grid-columns * $i);
        max-width: 100% / $grid-columns * $i;
      }
    }
    @for $i from 1 through $grid-columns {
      .col-#{$name}-offset-#{$i} {
        @include flexboxgrid-sass-col-common;
        margin-left: 100% / $grid-columns * $i
      }
    }
    .col-#{$name} {
      @include flex-grow(1);
      @include flex-basis(0);
      max-width: 100%;
    }
    .start-#{$name} {
      @include justify-content(flex-start);
      text-align: start;
    }

    .center-#{$name} {
      @include justify-content(center);
      text-align: center;
    }

    .end-#{$name} {
      @include justify-content(flex-end);
      text-align: end;
    }

    .top-#{$name} {
      @include align-items(flex-start);
    }

    .middle-#{$name} {
      @include align-items(center);
    }

    .bottom-#{$name} {
      @include align-items(flex-end);
    }

    .around-#{$name} {
      @include justify-content(space-around);
    }

    .between-#{$name} {
      @include justify-content(space-between);
    }

    .first-#{$name} {
      order: -1;
    }

    .last-#{$name} {
      order: 1;
    }

    .show-#{$name} {
      display: block !important;
    }

    .hide-#{$name} {
      display: none !important;
    }

    .text-left-#{$name}{
      text-align: left !important;
    }

    .text-right-#{$name} {
      text-align: right !important;
    }

    .text-center-#{$name} {
      text-align: center !important;
    }

    .pair-gutter-first-#{$name} {
     padding-left: $grid-gutter !important;
     padding-right: $grid-gutter / 2  !important;
   }

    .pair-gutter-last-#{$name} {
     padding-left:  $grid-gutter / 2  !important;
     padding-right: $grid-gutter !important;
   }

   .left-gutter-#{$name} {
     padding-left: $grid-gutter !important;
   }

   .right-gutter-#{$name}{
     padding-right: $grid-gutter !important;
   }

   .both-gutters-#{$name} {
    padding-left: $grid-gutter !important;
    padding-right: $grid-gutter !important;
   }

  }
}
